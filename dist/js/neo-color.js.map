{"version":3,"file":"neo-color.js","sources":["../../src/js/neo-color.ts"],"sourcesContent":["(function (Drupal) {\n\n  Drupal.behaviors.neoColor = {\n    init: false,\n\n    attach: function () {\n      const init = document.querySelector('[data-neo-pallet-init]');\n      if (init && !this.init) {\n        this.init = true;\n        const colorInput = document.querySelector('.neo-pallet-color') as HTMLInputElement;\n        if (colorInput) {\n          this.onColorChange(colorInput.value, colorInput);\n        }\n      }\n      else {\n        [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950].forEach((shade) => {\n          const colorInput = document.querySelector(`.neo-color--${shade}-color`) as HTMLInputElement;\n          this.onColorChange(colorInput.value, colorInput);\n        });\n      }\n    },\n\n    onColorContentChange: (originalColor:string, el:HTMLInputElement) => {\n      const color = el.getAttribute(\"data-neo-content-color\");\n      if (color === 'dark') {\n        document.querySelector<HTMLElement>('[data-neo-content-dark]')?.setAttribute('data-neo-content-dark', originalColor);\n      }\n      if (color === 'light') {\n        document.querySelector<HTMLElement>('[data-neo-content-light]')?.setAttribute('data-neo-content-light', originalColor);\n      }\n      Drupal.behaviors.neoColor.attach();\n    },\n\n    onColorChange: (originalColor:string, el:HTMLInputElement) => {\n      const shadeColor = el.getAttribute(\"data-neo-shade-color\");\n      const pallet = document.querySelector('[data-neo-pallet]')?.getAttribute('data-neo-pallet');\n      const specific = document.querySelector<HTMLInputElement>('.neo-color--specific')?.checked || false;\n      const lightHex = document.querySelector<HTMLElement>('[data-neo-content-light]')?.getAttribute('data-neo-content-light') || '#fff';\n      const darkHex = document.querySelector<HTMLElement>('[data-neo-content-dark]')?.getAttribute('data-neo-content-dark') || '#000';\n      const light = chroma(lightHex);\n      const dark = chroma(darkHex);\n\n      interface Rule {\n        [key:number]: number;\n      }\n      const rules:Rule = {\n        50: 15,\n        100: 35,\n        200: 80,\n        300: 160,\n        400: 325,\n        500: 500,\n        600: 600,\n        700: 700,\n        800: 800,\n        900: 900,\n        950: 950,\n      };\n\n      const updateColor = (color:chroma.Color, shade:string) => {\n        const deltaE = chroma.deltaE(color, light);\n        let isDark = deltaE <= 35;\n        const darkInput = document.querySelector(`.neo-color--${shade}-dark`) as HTMLInputElement;\n        if (darkInput && specific) {\n          isDark = darkInput.checked;\n        }\n        const colorContent = isDark ? dark : light;\n        const bgs = document.querySelectorAll<HTMLElement>(`.neo-pallet-preview--${shade}-bg`);\n        const contents = document.querySelectorAll<HTMLElement>(`.neo-pallet-preview--${shade}-content`);\n        const hexs = document.querySelectorAll<HTMLElement>(`.neo-pallet-preview--${shade}-hex`);\n        const rgbs = document.querySelectorAll<HTMLElement>(`.neo-pallet-preview--${shade}-rgb`);\n        const hsls = document.querySelectorAll<HTMLElement>(`.neo-pallet-preview--${shade}-hsl`);\n\n        const colorInput = document.querySelector(`.neo-color--${shade}-color`) as HTMLInputElement;\n        colorInput.value = String(color.hex());\n        const contentDark = document.querySelector(`.neo-color--${shade}-dark`) as HTMLInputElement;\n        contentDark.checked = isDark;\n        // if () {\n        //   contentDark.checked = isDark;\n        // }\n        // else {\n        //   contentDark.value = isDark ? '1' : '0';\n        // }\n\n        bgs.forEach((el) => {\n          el.style.backgroundColor = color.hex();\n        });\n        contents.forEach((el) => {\n          el.style.color = colorContent.hex();\n        });\n        hexs.forEach((el) => {\n          el.innerHTML = color.hex();\n        });\n        rgbs.forEach((el) => {\n          el.innerHTML = color.rgb().join(', ');\n        });\n        hsls.forEach((el) => {\n          const hsl = color.hsl();\n          el.innerHTML = 'hsl(' + Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%)';\n        });\n      }\n\n      if (shadeColor) {\n        updateColor(chroma(originalColor), String(shadeColor));\n      }\n      else {\n        const scale = chroma.scale(['#fff', originalColor, '#000']);\n        [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950].forEach((shade) => {\n          const amount = rules[shade] / 1000;\n          const color = scale(amount);\n          updateColor(color, String(shade));\n        });\n      }\n\n      if (pallet) {\n        const updateHead = () => {\n          let style:HTMLStyleElement|null = document.querySelector('style[neo-color-temp]');\n          if (!style) {\n            style = document.createElement('style');\n            style.setAttribute('neo-color-temp', '');\n            document.body.append(style);\n          }\n          const html:Array<string> = [];\n          [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950].forEach((shade) => {\n            const colorInput = document.querySelector(`.neo-color--${shade}-color`) as HTMLInputElement;\n            const color = chroma(colorInput.value);\n            html.push(`--color-${pallet}-${shade}: ${color.rgb().join(' ')};`);\n          });\n          style.innerHTML = `:root { ${html.join(' ')} }`;\n        }\n        updateHead();\n      }\n    }\n  };\n\n})(Drupal);\n\nexport {};\n"],"names":["Drupal","colorInput","shade","originalColor","el","_a","_b","color","_c","_d","shadeColor","pallet","specific","lightHex","darkHex","light","dark","rules","updateColor","isDark","darkInput","colorContent","bgs","contents","hexs","rgbs","hsls","contentDark","hsl","scale","amount","style","html"],"mappings":"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"}